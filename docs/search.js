window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "kepconfig", "modulename": "kepconfig", "kind": "module", "doc": "<h1 id=\"kepware-configuration-api-sdk-for-python\">Kepware Configuration API SDK for Python</h1>\n\n<p><a href=\"https://pypi.org/project/kepconfig\"><img src=\"https://img.shields.io/pypi/v/kepconfig\" alt=\"Released Version\" /></a> <a href=\"https://pypi.org/project/kepconfig\"><img src=\"https://img.shields.io/pypi/pyversions/kepconfig\" alt=\"Supported Versions\" /></a> <img src=\"https://img.shields.io/pypi/dm/kepconfig\" alt=\"PyPI - Downloads\" /> <img src=\"https://img.shields.io/pypi/l/kepconfig\" alt=\"PyPI - License\" /></p>\n\n<p>This is a package to help create Python applications to conduct operations with the Kepware Configuration API. This package is designed to work with all versions of Kepware that support the Configuration API including Thingworx Kepware Server (TKS), Thingworx Kepware Edge (TKE) and KEPServerEX (KEP).</p>\n\n<h2 id=\"prerequisites\">Prerequisites</h2>\n\n<p>Package supported and tested on Python 3.9 or later. Older versions support earlier Python 3 environments but have less functionality. All HTTP communication is handled by the <a href=\"https://docs.python.org/3/library/urllib.html#module-urllib\">urllib</a> Python standard library.</p>\n\n<h2 id=\"features\">Features</h2>\n\n<ul>\n<li>Supports both HTTP and HTTPS connections with certificate validation options</li>\n</ul>\n\n<p>SDK allows for <em>GET</em>, <em>ADD</em>, <em>DELETE</em>, and <em>MODIFY</em> functions for the following Kepware configuration objects:</p>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:center;\">Features</th>\n  <th style=\"text-align:center;\">TKS/KEP</th>\n  <th style=\"text-align:center;\">TKE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:center;\"><strong>Project Properties</strong> <br /> <em>(Get and Modify Only)</em></td>\n  <td style=\"text-align:center;\">Y</td>\n  <td style=\"text-align:center;\">Y</td>\n</tr>\n<tr>\n  <td style=\"text-align:center;\"><strong>Connectivity</strong> <br /> <em>(Channel, Devices, Tags, Tag Groups)</em></td>\n  <td style=\"text-align:center;\">Y</td>\n  <td style=\"text-align:center;\">Y</td>\n</tr>\n<tr>\n  <td style=\"text-align:center;\"><strong>IoT Gateway</strong> <br /> <em>(Agents, IoT Items)</em></td>\n  <td style=\"text-align:center;\">Y</td>\n  <td style=\"text-align:center;\">Y</td>\n</tr>\n<tr>\n  <td style=\"text-align:center;\"><strong>Datalogger</strong> <br /> <em>(Log Groups, Items, Mapping, Triggers, Reset Mapping Service)</em></td>\n  <td style=\"text-align:center;\">Y</td>\n  <td style=\"text-align:center;\">Y</td>\n</tr>\n<tr>\n  <td style=\"text-align:center;\"><strong>Administration</strong> <br /> <em>(User Groups, Users, UA Endpoints, Local License Server)</em></td>\n  <td style=\"text-align:center;\">Y*</td>\n  <td style=\"text-align:center;\">Y</td>\n</tr>\n<tr>\n  <td style=\"text-align:center;\"><strong>Product Info and Health Status**</strong></td>\n  <td style=\"text-align:center;\">Y</td>\n  <td style=\"text-align:center;\">Y</td>\n</tr>\n</tbody>\n</table>\n\n<ul>\n<li>Note (*) - UA Endpoints and Local License Server supported for Kepware Edge only</li>\n<li>Note (**) - Added to Kepware Server v6.13 / Kepware Edge v1.5 and later builds</li>\n</ul>\n\n<p>Driver specific features:</p>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:center;\">Driver</th>\n  <th style=\"text-align:center;\">Features</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:center;\">GE Ethernet Global Data</td>\n  <td style=\"text-align:center;\">Exchanges, Ranges and Name Resolutions</td>\n</tr>\n<tr>\n  <td style=\"text-align:center;\">Universal Device Driver</td>\n  <td style=\"text-align:center;\">Profile Library</td>\n</tr>\n</tbody>\n</table>\n\n<p>Methods to read the following logs:</p>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:center;\">Logs</th>\n  <th style=\"text-align:center;\">TKS/KEP</th>\n  <th style=\"text-align:center;\">TKE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:center;\"><strong>Event Log</strong></td>\n  <td style=\"text-align:center;\">Y</td>\n  <td style=\"text-align:center;\">Y</td>\n</tr>\n<tr>\n  <td style=\"text-align:center;\"><strong>API Transaction Log</strong></td>\n  <td style=\"text-align:center;\">Y</td>\n  <td style=\"text-align:center;\">Y</td>\n</tr>\n</tbody>\n</table>\n\n<p>Configuration API <em>Services</em> implemented:</p>\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:center;\">Services</th>\n  <th style=\"text-align:center;\">TKS/KEP</th>\n  <th style=\"text-align:center;\">TKE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:center;\"><strong>TagGeneration</strong><br /><em>(for supported drivers)</em></td>\n  <td style=\"text-align:center;\">Y</td>\n  <td style=\"text-align:center;\">Y</td>\n</tr>\n<tr>\n  <td style=\"text-align:center;\"><strong>ReinitializeRuntime</strong></td>\n  <td style=\"text-align:center;\">Y*</td>\n  <td style=\"text-align:center;\">Y</td>\n</tr>\n<tr>\n  <td style=\"text-align:center;\"><strong>ProjectLoad and ProjectSave</strong></td>\n  <td style=\"text-align:center;\">Y</td>\n  <td style=\"text-align:center;\">Y</td>\n</tr>\n</tbody>\n</table>\n\n<p>Note (*) - Reinitialize service was implemented for Kepware Server v6.8+</p>\n\n<p>Filtering, sorting and pagination query options are added for any collections methods (ex: get_all_devices() or get_all_channel()).</p>\n\n<p>Generic REST methods are provided to use for functions not developed in SDK package. These are found in the Server Class in <a href=\"./kepconfig/connection.py\">connection.py</a></p>\n\n<h2 id=\"known-limitations\">Known Limitations</h2>\n\n<ul>\n<li>Other property configuration for more complex drivers with objects besides channels, devices, tags and tag groups are not always explicitly defined</li>\n<li>Other supported plug-ins (EFM Exporter, Scheduler, etc) are not defined</li>\n<li>When using hostnames (not IP addresses) for connections, delays may occur under certain network configurations as the connection may attempt IPv6 connections first. IPv6 is not supported by Kepware servers at this time.</li>\n</ul>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>Package can be installed with <code>pip</code> using the following:</p>\n\n<pre><code>    pip install kepconfig\n</code></pre>\n\n<h2 id=\"key-concepts\">Key Concepts</h2>\n\n<p>NOTE: Detailed examples can also be found in the <a href=\"./examples/\">examples</a> folder.</p>\n\n<h3 id=\"create-server-connection\">Create server connection</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">kepconfig.connection</span>\n\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span><span class=\"p\">(</span><span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;127.0.0.1&#39;</span><span class=\"p\">,</span> <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"mi\">57412</span><span class=\"p\">,</span> <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Administrator&#39;</span><span class=\"p\">,</span> <span class=\"n\">pw</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># For HTTPS connections:</span>\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span><span class=\"p\">(</span><span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;127.0.0.1&#39;</span><span class=\"p\">,</span> <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"mi\">57512</span><span class=\"p\">,</span> <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Administrator&#39;</span><span class=\"p\">,</span> <span class=\"n\">pw</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">https</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>For certificate validation, the SDK uses the OS/systems trusted CA certificate store. The connection uses the \"create_default_context()\" function as part of urllib as described at the following links:</p>\n\n<ul>\n<li><a href=\"https://docs.python.org/3/library/ssl.html#ssl.create_default_context\">ssl.create_default_context</a></li>\n<li><a href=\"https://docs.python.org/3/library/ssl.html#ssl.SSLContext.load_default_certs\">ssl.SSLContext.load_default_certs</a></li>\n<li><a href=\"https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_default_verify_paths\">set_default_verify_paths</a></li>\n</ul>\n\n<p>For Windows OSes, the Kepware server's instance certificate can be loaded into the hosts \"Trusted Root Certificate Authorities\" store.</p>\n\n<h3 id=\"create-an-object\">Create an object</h3>\n\n<p>Objects such as channels or devices can be created either singularly or with children included.</p>\n\n<h3 id=\"ex-add-single-channel\">Ex: Add Single channel</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">kepconfig.connectivity</span> <span class=\"kn\">import</span> <span class=\"n\">channel</span>\n\n<span class=\"n\">channel_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;common.ALLTYPES_NAME&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Channel1&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;servermain.MULTIPLE_TYPES_DEVICE_DRIVER&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Simulator&quot;</span><span class=\"p\">}</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">add_channel</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">,</span><span class=\"n\">channel_data</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h3 id=\"ex-add-multiple-tags\">Ex: Add Multiple tags</h3>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">kepconfig.connectivity</span> <span class=\"kn\">import</span> <span class=\"n\">tag</span>\n\n<span class=\"n\">tag_info</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;common.ALLTYPES_NAME&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Temp&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;servermain.TAG_ADDRESS&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;R0&quot;</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;common.ALLTYPES_NAME&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Temp2&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;servermain.TAG_ADDRESS&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;R1&quot;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n<span class=\"n\">tag_path</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">{}</span><span class=\"s1\">.</span><span class=\"si\">{}</span><span class=\"s1\">.</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ch_name</span><span class=\"p\">,</span> <span class=\"n\">dev_name</span><span class=\"p\">,</span> <span class=\"n\">tag_group_path</span><span class=\"p\">)</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">add_tag</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">,</span> <span class=\"n\">tag_path</span><span class=\"p\">,</span> <span class=\"n\">tag_info</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<h2 id=\"need-more-information\">Need More Information</h2>\n\n<p><strong>Visit:</strong></p>\n\n<ul>\n<li><a href=\"https://www.kepware.com/\">Kepware.com</a></li>\n<li><a href=\"https://www.ptc.com/\">PTC.com</a></li>\n</ul>\n"}, {"fullname": "kepconfig.admin", "modulename": "kepconfig.admin", "kind": "module", "doc": "<p><code>admin</code> module provides functionality to manage Kepware Administration based \nproperties available through the Kepware Configuration API</p>\n"}, {"fullname": "kepconfig.admin.lls", "modulename": "kepconfig.admin.lls", "kind": "module", "doc": "<p><code>lls</code> exposes an API to allow modifications to Local License Server parameters in \nthe Kepware Administration through the Kepware Configuration API</p>\n"}, {"fullname": "kepconfig.admin.lls.lls_config", "modulename": "kepconfig.admin.lls", "qualname": "lls_config", "kind": "class", "doc": "<p>A class to represent a admin properties for the Local License Server connection from an instance of Kepware. \nThis object is used to easily manage the LLS parameters for a Kepware instance. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server_name</strong>:  Host name or IP address of the LLS server</li>\n<li><strong>server_port</strong>:  HTTP/non-SSL port to target for the LLS server</li>\n<li><strong>check_period</strong>:  Period that Kepware checks licensing status</li>\n<li><strong>server_port_SSL</strong>:  HTTPS/SSL port to target for the LLS server</li>\n<li><strong>allow_insecure_comms</strong>:  When True, use HTTP/non-SSL connection to LLS</li>\n<li><strong>allow_self_signed_certs</strong>:  Allow for self signed certificates to be used during HTTPS/SSL connections to the LLS</li>\n<li><strong>instance_alias_name</strong>:  Alias name for LLS to use as reference to this Kepware instance</li>\n</ul>\n"}, {"fullname": "kepconfig.admin.lls.lls_config.__init__", "modulename": "kepconfig.admin.lls", "qualname": "lls_config.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"p\">{}</span></span>)</span>"}, {"fullname": "kepconfig.admin.lls.get_lls_config", "modulename": "kepconfig.admin.lls", "qualname": "get_lls_config", "kind": "function", "doc": "<p>Returns the properties of the Local License server connection properties. Returned object is <code>lls_config</code> class object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><code>lls_config</code> class object with lls connection configuration</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span></span><span class=\"return-annotation\">) -> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">lls</span><span class=\"o\">.</span><span class=\"n\">lls_config</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.lls.update_lls_config", "modulename": "kepconfig.admin.lls", "qualname": "update_lls_config", "kind": "function", "doc": "<p>Updates the Local License Server connection properties for Kepware.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>config</strong>:  <code>lls_config</code> class object with lls connection configuration</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">lls</span><span class=\"o\">.</span><span class=\"n\">lls_config</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.lls.enable_lls", "modulename": "kepconfig.admin.lls", "qualname": "enable_lls", "kind": "function", "doc": "<p>Enables the Local License Server connection for Kepware.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.lls.disable_lls", "modulename": "kepconfig.admin.lls", "qualname": "disable_lls", "kind": "function", "doc": "<p>Disables the Local License Server connection for Kepware.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.lls.force_license_check", "modulename": "kepconfig.admin.lls", "qualname": "force_license_check", "kind": "function", "doc": "<p>Executes a ForceLicenseCheck service call to the Kepware instance. This triggers the server to verify the \nlicense state of the license received from the Local License Server.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>job_ttl</strong>:  <em>(optional)</em> Determines the number of seconds a job instance will exist following completion.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><code>KepServiceResponse</code> instance with job information</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError (If not HTTP code 202 [Accepted] or 429 [Too Busy] returned)</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">job_ttl</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.ua_server", "modulename": "kepconfig.admin.ua_server", "kind": "module", "doc": "<p><code>ua_server</code> exposes an API to allow modifications (add, delete, modify) to \nOPC UA Server endpoints within the Kepware Administration through the Kepware Configuration API</p>\n"}, {"fullname": "kepconfig.admin.ua_server.add_endpoint", "modulename": "kepconfig.admin.ua_server", "qualname": "add_endpoint", "kind": "function", "doc": "<p>Add an <code>\"endpoint\"</code> or multiple <code>\"endpoint\"</code> objects to Kepware UA Server by passing a \nlist of endpoints to be added all at once.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>DATA</strong>:  Dict or List of Dicts of the UA Endpoints to add</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 201 - Created\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>If a \"HTTP 207 - Multi-Status\" is received from Kepware with a list of dict error responses for all \n  endpoints added that failed.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.ua_server.del_endpoint", "modulename": "kepconfig.admin.ua_server", "qualname": "del_endpoint", "kind": "function", "doc": "<p>Delete an <code>\"endpoint\"</code> object in Kepware UA Server</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>endpoint</strong>:  name of endpoint to delete</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">endpoint</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.ua_server.modify_endpoint", "modulename": "kepconfig.admin.ua_server", "qualname": "modify_endpoint", "kind": "function", "doc": "<p>Modify a <code>\"endpoint\"</code> object and it's properties in Kepware UA Server. If a <code>\"endpoint\"</code> is not provided as an input,\nyou need to identify the endpoint in the <em>'common.ALLTYPES_NAME'</em> property field in the <code>\"DATA\"</code>. It will \nassume that is the endpoint that is to be modified.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>DATA</strong>:  Dict of the UA endpoint properties to be modified.</li>\n<li><strong>endpoint</strong>:  <em>(optional)</em> name of endpoint to modify. Only needed if not existing in <code>\"DATA\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">endpoint</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.ua_server.get_endpoint", "modulename": "kepconfig.admin.ua_server", "qualname": "get_endpoint", "kind": "function", "doc": "<p>Returns the properties of the <code>\"endpoint\"</code> object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>endpoint</strong>:  name of endpoint to retrieve</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of properties for the UA endpoint requested</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">endpoint</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.ua_server.get_all_endpoints", "modulename": "kepconfig.admin.ua_server", "qualname": "get_all_endpoints", "kind": "function", "doc": "<p>Returns list of all <code>\"endpoint\"</code> objects and their properties.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>options</strong>:  <em>(optional)</em> Dict of parameters to filter, sort or pagenate the list of UA endpoints. Options are 'filter', \n'sortOrder', 'sortProperty', 'pageNumber', and 'pageSize.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List of properties for all UA endpoints requested</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.user_groups", "modulename": "kepconfig.admin.user_groups", "kind": "module", "doc": "<p><code>user_groups</code> exposes an API to allow modifications (add, delete, modify) to \nuser groups within the Kepware Administration User Manager through the Kepware Configuration API</p>\n"}, {"fullname": "kepconfig.admin.user_groups.add_user_group", "modulename": "kepconfig.admin.user_groups", "qualname": "add_user_group", "kind": "function", "doc": "<p>Add a <code>\"user group\"</code> or multiple <code>\"user group\"</code> objects to Kepware User Manager by passing a \nlist of user groups to be added all at once.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>DATA</strong>:  Dict or List of Dicts of the user groups to add</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 201 - Created\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>If a \"HTTP 207 - Multi-Status\" is received from Kepware with a list of dict error responses for all \n  endpoints added that failed.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.user_groups.del_user_group", "modulename": "kepconfig.admin.user_groups", "qualname": "del_user_group", "kind": "function", "doc": "<p>Delete a <code>\"user group\"</code> object in Kepware User Manager</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>user_group</strong>:  name of user group to delete</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">user_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.user_groups.modify_user_group", "modulename": "kepconfig.admin.user_groups", "qualname": "modify_user_group", "kind": "function", "doc": "<p>Modify a <code>\"user group\"</code> object and it's properties in Kepware User Manager. If a <code>\"user group\"</code> is not provided as an input,\nyou need to identify the user group in the <em>'common.ALLTYPES_NAME'</em> property field in the <code>\"DATA\"</code>. It will \nassume that is the user group that is to be modified.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>DATA</strong>:  Dict of the user group properties to be modified.</li>\n<li><strong>user_group</strong>:  <em>(optional)</em> name of user group to modify. Only needed if not existing in <code>\"DATA\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">user_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.user_groups.get_user_group", "modulename": "kepconfig.admin.user_groups", "qualname": "get_user_group", "kind": "function", "doc": "<p>Returns the properties of the <code>\"user group\"</code> object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>user_group</strong>:  name of user group to retrieve</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of properties for the user group requested</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">user_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.user_groups.get_all_user_groups", "modulename": "kepconfig.admin.user_groups", "qualname": "get_all_user_groups", "kind": "function", "doc": "<p>Returns list of all <code>\"user group\"</code> objects and their properties.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>options</strong>:  <em>(optional)</em> Dict of parameters to filter, sort or pagenate the list of user groups. Options are 'filter', \n'sortOrder', 'sortProperty', 'pageNumber', and 'pageSize.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List of properties for all user groups</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.user_groups.enable_user_group", "modulename": "kepconfig.admin.user_groups", "qualname": "enable_user_group", "kind": "function", "doc": "<p>Enable the <code>\"user group\"</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>user_group</strong>:  name of user group</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">user_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.user_groups.disable_user_group", "modulename": "kepconfig.admin.user_groups", "qualname": "disable_user_group", "kind": "function", "doc": "<p>Disable the <code>\"user group\"</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>user_group</strong>:  name of user group</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">user_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.users", "modulename": "kepconfig.admin.users", "kind": "module", "doc": "<p><code>users</code> exposes an API to allow modifications (add, delete, modify) to \nusers within the Kepware Administration User Management through the Kepware Configuration API</p>\n"}, {"fullname": "kepconfig.admin.users.add_user", "modulename": "kepconfig.admin.users", "qualname": "add_user", "kind": "function", "doc": "<p>Add a <code>\"user\"</code> or multiple <code>\"user\"</code> objects to Kepware User Manager by passing a \nlist of users to be added all at once.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>DATA</strong>:  Dict or List of Dicts of the users to add</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 201 - Created\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>If a \"HTTP 207 - Multi-Status\" is received from Kepware with a list of dict error responses for all \n  endpoints added that failed.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.users.del_user", "modulename": "kepconfig.admin.users", "qualname": "del_user", "kind": "function", "doc": "<p>Delete a <code>\"user\"</code> object in Kepware User Manager</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>user</strong>:  name of user to delete</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.users.modify_user", "modulename": "kepconfig.admin.users", "qualname": "modify_user", "kind": "function", "doc": "<p>Modify a <code>\"user object\"</code> and it's properties in Kepware User Manager. If a <code>\"user\"</code> is not provided as an input,\nyou need to identify the user in the <em>'common.ALLTYPES_NAME'</em> property field in the <code>\"DATA\"</code>. It will \nassume that is the user that is to be modified.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>DATA</strong>:  Dict of the user properties to be modified.</li>\n<li><strong>user</strong>:  <em>(optional)</em> name of user to modify. Only needed if not existing in <code>\"DATA\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.users.get_user", "modulename": "kepconfig.admin.users", "qualname": "get_user", "kind": "function", "doc": "<p>Returns the properties of the <code>\"user\"</code> object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>user</strong>:  name of user to retrieve</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of properties for the user requested</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.users.get_all_users", "modulename": "kepconfig.admin.users", "qualname": "get_all_users", "kind": "function", "doc": "<p>Returns list of all <code>\"user\"</code> objects and their properties.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>options</strong>:  <em>(optional)</em> Dict of parameters to filter, sort or pagenate the list of users. Options are 'filter', \n'sortOrder', 'sortProperty', 'pageNumber', and 'pageSize.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List of properties for all users</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.users.enable_user", "modulename": "kepconfig.admin.users", "qualname": "enable_user", "kind": "function", "doc": "<p>Enable the <code>\"user\"</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>user</strong>:  name of user</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.admin.users.disable_user", "modulename": "kepconfig.admin.users", "qualname": "disable_user", "kind": "function", "doc": "<p>Disable the <code>\"user\"</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>user</strong>:  name of user</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connection", "modulename": "kepconfig.connection", "kind": "module", "doc": "<p><code>connection</code> exposes an <code>server</code> class that manages the connection\ninformation and RESTful requests for the Kepware Configuration API Library.</p>\n"}, {"fullname": "kepconfig.connection.server", "modulename": "kepconfig.connection", "qualname": "server", "kind": "class", "doc": "<p>A class to represent a connection to an instance of Kepware. This object is used to \ncreate the Authentication and server parameters to taget a Kepware instance. An instance of this is \nused in all configuration calls done.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>host</strong>:  host name or IP address</li>\n<li><strong>port</strong>:  port of Configuration API</li>\n<li><strong>username</strong>:  username to conduct \"Basic Authentication\"</li>\n<li><strong>password</strong>:  password to conduct \"Basic Authentication\"</li>\n<li><strong>https: Sets <code>SSL_on</code> to use HTTPS connection (Default</strong>:  False)</li>\n<li><strong>SSL_on: Identify to use HTTPS connection (Default</strong>:  False)</li>\n<li><strong>SSL_ignore_hostname</strong>:  During certificate validation ignore the hostname check</li>\n<li><strong>SSL_trust_all_certs</strong>:  (insecure) - During certificate validation trust any certificate - if True, \nwill \"set SSL_ignore_hostname\" to true</li>\n<li><strong>url</strong>:  base URL for the server connection</li>\n</ul>\n\n<p><strong>Methods</strong></p>\n\n<p><code>reinitialize()</code>: reinitialize the Kepware server</p>\n\n<p><code>get_transaction_log()</code>: retrieve the Configuration API transaction logs</p>\n\n<p><code>get_event_log()</code>: retrieve the Kepware Event Log</p>\n\n<p><code>get_project_properties()</code>: retrieve the Kepware Project Properties</p>\n\n<p><code>modify_project_properties()</code> - modify the Kepware Project Properties</p>\n\n<p><code>service_status()</code> - retrive service job status</p>\n"}, {"fullname": "kepconfig.connection.server.__init__", "modulename": "kepconfig.connection", "qualname": "server.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">pw</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">https</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "kepconfig.connection.server.get_status", "modulename": "kepconfig.connection", "qualname": "server.get_status", "kind": "function", "doc": "<p>Executes a health status request to the Kepware instance to report service statuses.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List of data for the health status request</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connection.server.get_info", "modulename": "kepconfig.connection", "qualname": "server.get_info", "kind": "function", "doc": "<p>Requests product information from the Kepware instance. Provides various information including\nproduct name and version information.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict of data for the product information request</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connection.server.reinitialize", "modulename": "kepconfig.connection", "qualname": "server.reinitialize", "kind": "function", "doc": "<p>Executes a Reinitialize service call to the Kepware instance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>job_ttl</strong>:  <em>(optional)</em> Determines the number of seconds a job instance will exist following completion.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><code>KepServiceResponse</code> instance with job information</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError (If not HTTP code 202 [Accepted] or 429 [Too Busy] returned)</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">job_ttl</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">structures</span><span class=\"o\">.</span><span class=\"n\">KepServiceResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connection.server.get_transaction_log", "modulename": "kepconfig.connection", "qualname": "server.get_transaction_log", "kind": "function", "doc": "<p>Get the Transaction Log from the Kepware instance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>limit</strong>:  <em>(optional)</em> number of transaction log entries to request</li>\n<li><strong>start</strong>:  <em>(optional)</em> start time of query as <code>datetime.datetime</code> type and should be UTC</li>\n<li><strong>end</strong>:  <em>(optional)</em> end time of query as <code>datetime.datetime</code> type and should be UTC</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connection.server.get_event_log", "modulename": "kepconfig.connection", "qualname": "server.get_event_log", "kind": "function", "doc": "<p>Get the Event Log from the Kepware instance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>limit</strong>:  <em>(optional)</em> number of event log entries to request</li>\n<li><strong>start</strong>:  <em>(optional)</em> start time of query as <code>datetime.datetime</code> type and should be UTC</li>\n<li><strong>end</strong>:  <em>(optional)</em> end time of query as <code>datetime.datetime</code> type and should be UTC</li>\n<li><strong>options</strong>:  <em>(optional)</em> Dict of parameters to filter, sort or pagenate the list of transactions. Options are <code>event</code>, \n<code>sortOrder</code>, <code>sortProperty</code>, <code>pageNumber</code>, and <code>pageSize</code></li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connection.server.get_project_properties", "modulename": "kepconfig.connection", "qualname": "server.get_project_properties", "kind": "function", "doc": "<p>Get the Project Properties of the Kepware instance.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of all the project properties</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connection.server.modify_project_properties", "modulename": "kepconfig.connection", "qualname": "server.modify_project_properties", "kind": "function", "doc": "<p>Modify the Project Properties of the Kepware instance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>DATA</strong>:  Dict of the project properties to be modified</li>\n<li><strong>force</strong>:  <em>(optional)</em> if True, will force the configuration update to the Kepware server</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connection.server.save_project", "modulename": "kepconfig.connection", "qualname": "server.save_project", "kind": "function", "doc": "<p>Executes a ProjectSave Service call to the Kepware instance. This saves \na copy of the current project file to disk. The filename</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>filename</strong>:  Relative file path and name of project file including the file extension to save.\nLocation of relative project file paths:</p>\n\n<pre><code>TKS or KEP (Windows): C:\\PROGRAMDATA\\PTC\\Thingworx Kepware Server\\V6 or \n                C:\\PROGRAMDATA\\Kepware\\KEPServerEX\\V6\nTKE (Linux):    /opt/tkedge/v1/user_data\n</code></pre></li>\n<li><p><strong>password</strong>:  <em>(optional)</em> Specify a password with which to  save an encrypted project file with. <br />\nThis password will be required to load this project file.</p></li>\n<li><strong>job_ttl</strong>:  <em>(optional)</em> Determines the number of seconds a job instance will exist following completion.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><code>KepServiceResponse</code> instance with job information</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError (If not HTTP code 202 [Accepted] or 429 [Too Busy] returned)</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">job_ttl</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">structures</span><span class=\"o\">.</span><span class=\"n\">KepServiceResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connection.server.load_project", "modulename": "kepconfig.connection", "qualname": "server.load_project", "kind": "function", "doc": "<p>Executes a ProjectLoad Service call to the Kepware instance. This loads \na project file to disk.</p>\n\n<p>INPUTS:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>filename</strong>:  Fully qualified or relative path and name of project file including the file extension. Absolute\npaths required for TKS and KEP while file path is relative for TKE:</p>\n\n<pre><code>Windows - filename = C:\\filepath\\test.opf\nLinux - filename = filepath/test.lpf - Location is /opt/tkedge/v1/user_data/filepath/test.lpf\n</code></pre></li>\n<li><p><strong>password</strong>:  <em>(optional)</em> Specify a password with which to load an encrypted project file.          </p></li>\n<li><strong>job_ttl</strong>:  <em>(optional)</em> Determines the number of seconds a job instance will exist following completion.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><code>KepServiceResponse</code> instance with job information</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError (If not HTTP code 202 [Accepted] or 429 [Too Busy] returned)</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">job_ttl</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">structures</span><span class=\"o\">.</span><span class=\"n\">KepServiceResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connection.server.service_status", "modulename": "kepconfig.connection", "qualname": "server.service_status", "kind": "function", "doc": "<p>Returns the status of a service job. Used to verify if a service call\nhas completed or not.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>resp</strong>:  <code>KepServiceResponse</code> instance with job information</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><code>KepServiceStatus</code> instance with job status</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">resp</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">structures</span><span class=\"o\">.</span><span class=\"n\">KepServiceResponse</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity", "modulename": "kepconfig.connectivity", "kind": "module", "doc": "<p><code>connectivity</code> module provides functionality to manage Kepware driver configuration \navailable through the Kepware Configuration API. This includes channels, devices, \ntags, tag groups and driver specific objects. </p>\n\n<p>Driver specific object support, if available, through their own modules. Currently\nthe GE Ethernet Global Data and Universal Device Drivers have driver specific API\nsupport in the SDK.</p>\n"}, {"fullname": "kepconfig.connectivity.channel", "modulename": "kepconfig.connectivity.channel", "kind": "module", "doc": "<p><code>channel</code> exposes an API to allow modifications (add, delete, modify) to \nchannel objects within the Kepware Configuration API</p>\n"}, {"fullname": "kepconfig.connectivity.channel.add_channel", "modulename": "kepconfig.connectivity.channel", "qualname": "add_channel", "kind": "function", "doc": "<p>Add a <code>\"channel\"</code> or multiple <code>\"channel\"</code> objects to Kepware. Can be used to pass children of a channel object \nsuch as devices and tags/tag groups. This allows you to create a channel, it's devices and tags \nall in one function, if desired.</p>\n\n<p>Additionally it can be used to pass a list of channels and it's children to be added all at once.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>DATA</strong>:  Dict of the channel and it's children\nexpected by Kepware Configuration API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 201 - Created\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>If a \"HTTP 207 - Multi-Status\" is received from Kepware with a list of dict error responses for all \n  channels added that failed.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.channel.del_channel", "modulename": "kepconfig.connectivity.channel", "qualname": "del_channel", "kind": "function", "doc": "<p>Delete a <code>\"channel\"</code> object in Kepware. This will delete all children as well</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>channel</strong>:  name of channel</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.channel.modify_channel", "modulename": "kepconfig.connectivity.channel", "qualname": "modify_channel", "kind": "function", "doc": "<p>Modify a channel object and it's properties in Kepware. If a <code>\"channel\"</code> is not provided as an input,\nyou need to identify the channel in the <em>'common.ALLTYPES_NAME'</em> property field in <code>\"DATA\"</code>. It will \nassume that is the channel that is to be modified.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>DATA</strong>:  Dict of the <code>channel</code> properties to be modified</li>\n<li><strong>channel</strong>:  <em>(optional)</em> - name of channel to modify. Only needed if not existing in <code>\"DATA\"</code></li>\n<li><strong>force</strong>:  <em>(optional)</em> if True, will force the configuration update to the Kepware server</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.channel.get_channel", "modulename": "kepconfig.connectivity.channel", "qualname": "get_channel", "kind": "function", "doc": "<p>Returns the properties of the channel object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>channel</strong>:  name of channel</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of data for the channel requested</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.channel.get_all_channels", "modulename": "kepconfig.connectivity.channel", "qualname": "get_all_channels", "kind": "function", "doc": "<p>Returns list of all channel objects and their properties.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>options</strong>:  <em>(optional)</em> Dict of parameters to filter, sort or pagenate the list of channels. Options are <code>filter</code>, \n<code>sortOrder</code>, <code>sortProperty</code>, <code>pageNumber</code>, and <code>pageSize</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List of data for all channels in Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.channel.get_channel_structure", "modulename": "kepconfig.connectivity.channel", "qualname": "get_channel_structure", "kind": "function", "doc": "<p>Returns the properties of <code>\"channel\"</code> and includes all <code>\"devices\"</code> and the <code>\"tag\"</code> and <code>\"tag group\"</code> objects for a \nchannel in Kepware. Returned object is a dict of channel properties including a device list with \ntag lists and tag group lists.</p>\n\n<p>The returned object resembles the example below, nested based on how many \nlevels the tag_group namespace has tags or tag_groups:</p>\n\n<p>Example return:</p>\n\n<pre><code>{\n    channel_properties,\n    'devices: [\n        {\n            device1_properties,\n            'tags': [tag1_dict, tag2_dict,...],\n            'tag_groups':[\n                {\n                    tag_group1_properties,\n                    'tags': [tag1_dict, tag2_dict,...]\n                    'tag_groups':[sub_group1, subgroup2,...]\n                }, \n                {\n                    tag_group2_properties,\n                    'tags': [tag1_dict, tag2_dict,...]\n                    'tag_groups':[sub_group1, subgroup2,...]\n                },...]\n        },...]\n}\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>channel</strong>:  name of channel</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of data for the channel structure requested for <code>\"channel\"</code></p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.device", "modulename": "kepconfig.connectivity.device", "kind": "module", "doc": "<p><code>device</code> exposes an API to allow modifications (add, delete, modify) to \ndevice objects within the Kepware Configuration API</p>\n"}, {"fullname": "kepconfig.connectivity.device.add_device", "modulename": "kepconfig.connectivity.device", "qualname": "add_device", "kind": "function", "doc": "<p>Add a <code>\"device\"</code> or multiple <code>\"device\"</code> objects to a channel in Kepware. Can be used to pass children of a device object \nsuch as tags and tag groups. This allows you to create a device and tags \nall in one function, if desired.</p>\n\n<p>Additionally it can be used to pass a list of devices and it's children to be added all at once.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>channel_name</strong>:  channel to add the device object(s)</li>\n<li><strong>DATA</strong>:  Dict or List of Dicts of the device(s) and it's children\nexpected by Kepware Configuration API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 201 - Created\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>If a \"HTTP 207 - Multi-Status\" is received from Kepware with a list of dict error responses for all \n  devices added that failed.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">channel_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.device.del_device", "modulename": "kepconfig.connectivity.device", "qualname": "del_device", "kind": "function", "doc": "<p>Delete a <code>\"device\"</code> object in Kepware. This will delete all children as well.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>device_path</strong>:  path identifying device to delete. Standard Kepware address decimal notation string including the \ndevice such as <code>\"channel1.device1\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">device_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.device.modify_device", "modulename": "kepconfig.connectivity.device", "qualname": "modify_device", "kind": "function", "doc": "<p>Modify a device object and it's properties in Kepware.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>device_path</strong>:  path identifying device to modffy. Standard Kepware address decimal notation string including the \ndevice such as <code>\"channel1.device1\"</code></li>\n<li><strong>DATA</strong>:  Dict of the <code>device</code> properties to be modified</li>\n<li><strong>force</strong>:  <em>(optional)</em> if True, will force the configuration update to the Kepware server</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">device_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.device.get_device", "modulename": "kepconfig.connectivity.device", "qualname": "get_device", "kind": "function", "doc": "<p>Returns the properties of the device object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>device_path</strong>:  path identifying device to retrieve properties. Standard Kepware address decimal notation string including the \ndevice such as <code>\"channel1.device1\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of data for the device requested</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">device_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.device.get_all_devices", "modulename": "kepconfig.connectivity.device", "qualname": "get_all_devices", "kind": "function", "doc": "<p>Returns list of all device objects and their properties within a channel. Returned object is JSON list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>channel</strong>:  name of channel</li>\n<li><strong>options</strong>:  <em>(optional)</em> Dict of parameters to filter, sort or pagenate the list of devices. Options are <code>filter</code>, \n<code>sortOrder</code>, <code>sortProperty</code>, <code>pageNumber</code>, and <code>pageSize</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List of data for all devices within the channel</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">channel_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.device.auto_tag_gen", "modulename": "kepconfig.connectivity.device", "qualname": "auto_tag_gen", "kind": "function", "doc": "<p>Executes Auto Tag Generation function on devices that support the feature in Kepware</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><p><strong>device_path</strong>:  path identifying device to modffy. Standard Kepware address decimal notation string including the \ndevice such as <code>\"channel1.device1\"</code></p></li>\n<li><p><strong>job_ttl</strong>:  <em>(optional)</em> Determines the number of seconds a job instance will exist following completion.</p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><code>KepServiceResponse</code> instance with job information</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError (If not HTTP code 202 [Accepted] or 429 [Too Busy] returned)</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">device_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">job_ttl</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">structures</span><span class=\"o\">.</span><span class=\"n\">KepServiceResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.device.get_all_tags_tag_groups", "modulename": "kepconfig.connectivity.device", "qualname": "get_all_tags_tag_groups", "kind": "function", "doc": "<p>Returns the properties of all <code>\"tag\"</code> and <code>\"tag group\"</code> objects for as specific\ndevice in Kepware. Returned object is a dict of tag list and tag group list.</p>\n\n<p>The returned object resembles the example below, nested based on how many \nlevels the tag_group namespace has tags or tag_groups:</p>\n\n<p>Example return:</p>\n\n<pre><code>{\n    'tags': [tag1_dict, tag2_dict,...],\n    'tag_groups':[\n        {\n            tag_group1_properties,\n            'tags': [tag1_dict, tag2_dict,...]\n            'tag_groups':[sub_group1, subgroup2,...]\n        }, \n        {\n            tag_group2_properties,\n            'tags': [tag1_dict, tag2_dict,...]\n            'tag_groups':[sub_group1, subgroup2,...]\n        },...]\n}\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>device_path</strong>:  path identifying device to modffy. Standard Kepware address decimal notation string including the \ndevice such as <code>\"channel1.device1\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of data for the tag structure for device requested at <code>\"device_path\"</code> location</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">device_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.device.get_device_structure", "modulename": "kepconfig.connectivity.device", "qualname": "get_device_structure", "kind": "function", "doc": "<p>Returns the properties of <code>\"device\"</code> and includes all <code>\"tag\"</code> and <code>\"tag group\"</code> objects for as specific\ndevice in Kepware. Returned object is a dict of device properties including a tag list and tag group list.</p>\n\n<p>The returned object resembles example below, nested based on how many \nlevels the tag_group namespace has tags or tag_groups:</p>\n\n<p>Example return:</p>\n\n<pre><code>{\n    device_properties,\n    'tags': [tag1_dict, tag2_dict,...],\n    'tag_groups':[\n        {\n            tag_group1_properties,\n            'tags': [tag1_dict, tag2_dict,...]\n            'tag_groups':[sub_group1, subgroup2,...]\n        }, \n        {\n            tag_group2_properties,\n            'tags': [tag1_dict, tag2_dict,...]\n            'tag_groups':[sub_group1, subgroup2,...]\n        },...]\n}\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>device_path</strong>:  path identifying device to modffy. Standard Kepware address decimal notation string including the \ndevice such as <code>\"channel1.device1\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of data for the device structure at <code>\"device_path\"</code> location</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">device_path</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.egd", "modulename": "kepconfig.connectivity.egd", "kind": "module", "doc": "<p><code>egd</code> module provides support for GE EGD driver specific objects \nwithin the Kepware Configuration API</p>\n"}, {"fullname": "kepconfig.connectivity.egd.exchange", "modulename": "kepconfig.connectivity.egd.exchange", "kind": "module", "doc": "<p><code>exchange</code> exposes an API to allow modifications (add, delete, modify) to \nexchange objects for EGD devices within the Kepware Configuration API</p>\n"}, {"fullname": "kepconfig.connectivity.egd.exchange.add_exchange", "modulename": "kepconfig.connectivity.egd.exchange", "qualname": "add_exchange", "kind": "function", "doc": "<p>Add a <code>\"exchange\"</code> or multiple <code>\"exchange\"</code> objects to Kepware. Can be used to pass children of a exchange object \nsuch as ranges. This allows you to create a exchange and ranges for the exchange all in one function, if desired.</p>\n\n<p>Additionally it can be used to pass a list of exchanges and it's children to be added all at once.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>device_path</strong>:  path to EGD device with exchanges. Standard Kepware address decimal \nnotation string such as <code>\"channel1.device1\"</code></li>\n<li><strong>ex_type</strong>:  type of exchange, either <code>CONSUMER</code> or <code>PRODUCER</code></li>\n<li><strong>DATA</strong>:  Dict or List of Dicts of the exchange(s) and it's children\nexpected by Kepware Configuration API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 201 - Created\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>If a \"HTTP 207 - Multi-Status\" is received from Kepware with a list of dict error responses for all \n  exchanges added that failed.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">device_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ex_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.egd.exchange.del_exchange", "modulename": "kepconfig.connectivity.egd.exchange", "qualname": "del_exchange", "kind": "function", "doc": "<p>Delete an <code>\"exchange\"</code> object in Kepware. This will delete all children as well</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>device_path</strong>:  path to EGD device with exchanges. Standard Kepware address decimal \nnotation string such as <code>\"channel1.device1\"</code></li>\n<li><strong>ex_type</strong>:  type of exchange, either <code>CONSUMER</code> or <code>PRODUCER</code></li>\n<li><strong>exchange_name</strong>:  name of exchange to delete</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">device_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ex_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">exchange_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.egd.exchange.modify_exchange", "modulename": "kepconfig.connectivity.egd.exchange", "qualname": "modify_exchange", "kind": "function", "doc": "<p>Modify a <code>\"exchange\"</code> object and it's properties in Kepware. If a <code>\"exchange_name\"</code> is not provided as an input,\nyou need to identify the exchange in the <em>'common.ALLTYPES_NAME'</em> property field in the <code>\"DATA\"</code>. It will \nassume that is the exchange that is to be modified.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>device_path</strong>:  path to EGD device with exchanges. Standard Kepware address decimal \nnotation string such as <code>\"channel1.device1\"</code></li>\n<li><strong>DATA</strong>:  Dict of the exchange properties to be modified.</li>\n<li><strong>ex_type</strong>:  type of exchange, either <code>CONSUMER</code> or <code>PRODUCER</code></li>\n<li><strong>exchange_name</strong>:  <em>(optional)</em> name of exchange to modify. Only needed if not existing in <code>\"DATA\"</code></li>\n<li><strong>force</strong>:  <em>(optional)</em> if True, will force the configuration update to the Kepware server</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">device_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ex_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">exchange_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.egd.exchange.get_exchange", "modulename": "kepconfig.connectivity.egd.exchange", "qualname": "get_exchange", "kind": "function", "doc": "<p>Returns the properties of the exchange object or a list of all exchanges and their \nproperties for the type input. Returned object is JSON.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>device_path</strong>:  path to EGD device with exchanges. Standard Kepware address decimal \nnotation string such as <code>\"channel1.device1\"</code></li>\n<li><strong>ex_type</strong>:  type of exchange, either <code>CONSUMER</code> or <code>PRODUCER</code></li>\n<li><strong>exchange_name</strong>:  <em>(optional)</em> name of exchange. If not defined, get all exchanges</li>\n<li><strong>options</strong>:  <em>(optional)</em> Dict of parameters to filter, sort or pagenate the list of exchanges. Options are 'filter', \n'sortOrder', 'sortProperty', 'pageNumber', and 'pageSize'. Only used when exchange_name is not defined.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of properties for the exchange requested or a List of exchanges and their properties</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">device_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ex_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">exchange_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.egd.exchange.get_all_exchanges", "modulename": "kepconfig.connectivity.egd.exchange", "qualname": "get_all_exchanges", "kind": "function", "doc": "<p>Returns list of all <code>\"exchange\"</code> objects (both CONSUMER and PRODUCER) and their properties. Returned object is JSON list.</p>\n\n<p>INPUTS:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>device_path</strong>:  path to EGD device with exchanges. Standard Kepware address decimal \nnotation string such as <code>\"channel1.device1\"</code></li>\n<li><strong>options</strong>:  <em>(optional)</em> Dict of parameters to filter, sort or pagenate the list of exchanges. Options are 'filter', \n'sortOrder', 'sortProperty', 'pageNumber', and 'pageSize'. Only used when exchange_name is not defined.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List - [list of consumer exchanges, list of producer exchanges] - list of lists for all \n  exchanges for the device</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">device_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.egd.name", "modulename": "kepconfig.connectivity.egd.name", "kind": "module", "doc": "<p><code>names</code> exposes an API to allow modifications (add, delete, modify) to \nname resolution objects for EGD devices within the Kepware Configuration API</p>\n"}, {"fullname": "kepconfig.connectivity.egd.name.add_name_resolution", "modulename": "kepconfig.connectivity.egd.name", "qualname": "add_name_resolution", "kind": "function", "doc": "<p>Add a <code>\"name resolution\"</code> or multiple <code>\"name resolution\"</code> objects to Kepware. This allows you to \ncreate a name resolution or multiple name resolutions all in one function, if desired.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>device_path</strong>:  path to EGD device. Standard Kepware address decimal \nnotation string such as <code>\"channel1.device1\"</code></li>\n<li><strong>DATA</strong>:  Dict or List of Dicts of name resolutions\nexpected by Kepware Configuration API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 201 - Created\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>If a \"HTTP 207 - Multi-Status\" is received from Kepware with a list of dict error responses for all \n  name resolutions added that failed.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">device_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.egd.name.del_name_resolution", "modulename": "kepconfig.connectivity.egd.name", "qualname": "del_name_resolution", "kind": "function", "doc": "<p>Delete a <code>\"name resolution\"</code> object in Kepware.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>device_path</strong>:  path to EGD device. Standard Kepware address decimal \nnotation string such as <code>\"channel1.device1\"</code></li>\n<li><strong>name</strong>:  name of name resolution to delete</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">device_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.egd.name.modify_name_resolution", "modulename": "kepconfig.connectivity.egd.name", "qualname": "modify_name_resolution", "kind": "function", "doc": "<p>Modify a <code>\"name resolution\"</code> object and it's properties in Kepware. If a <code>\"name\"</code> is not provided as an input,\nyou need to identify the name resolution in the <em>'common.ALLTYPES_NAME'</em> property field in the <code>\"DATA\"</code>. It will \nassume that is the name resolution that is to be modified.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>device_path</strong>:  path to EGD device. Standard Kepware address decimal \nnotation string such as <code>\"channel1.device1\"</code></li>\n<li><strong>DATA</strong>:  Dict of name resolution properties to be modified</li>\n<li><strong>name</strong>:  <em>(optional)</em> name of name resolution to modify. Only needed if not existing in <code>\"DATA\"</code></li>\n<li><strong>force</strong>:  <em>(optional)</em> if True, will force the configuration update to the Kepware server</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">device_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.egd.name.get_name_resolution", "modulename": "kepconfig.connectivity.egd.name", "qualname": "get_name_resolution", "kind": "function", "doc": "<p>Returns the properties of the <code>\"name resolution\"</code> object or a list of all name resolutions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>device_path</strong>:  path to EGD device. Standard Kepware address decimal \nnotation string such as <code>\"channel1.device1\"</code></li>\n<li><strong>DATA</strong>:  Dict of name resolution properties to be modified</li>\n<li><strong>name</strong>:  <em>(optional)</em> name of name resolution to retrieve. If not defined, will get all name resolutions</li>\n<li><strong>options</strong>:  <em>(optional)</em> Dict of parameters to filter, sort or pagenate when getting a list of profiles. Options are <code>filter</code>, \n<code>sortOrder</code>, <code>sortProperty</code>, <code>pageNumber</code>, and <code>pageSize</code>. Only used when <code>\"name\"</code> is not defined.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of the name resolution properties or List of Dicts for all name resolutions and their properties </p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">device_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.egd.range", "modulename": "kepconfig.connectivity.egd.range", "kind": "module", "doc": "<p><code>ranges</code> exposes an API to allow modifications (add, delete, modify) to \nrange objects in exchanges for EGD devices within the Kepware Configuration API</p>\n"}, {"fullname": "kepconfig.connectivity.egd.range.add_range", "modulename": "kepconfig.connectivity.egd.range", "qualname": "add_range", "kind": "function", "doc": "<p>Add a <code>\"range\"</code> or multiple <code>\"range\"</code> objects to Kepware. This allows you to \ncreate a range or multiple ranges all in one function, if desired.</p>\n\n<p>When passing multiple ranges, they will be populated in the same order\nin the list sent. Ensure you provide the list in the order desired.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>device_path</strong>:  path to EGD device. Standard Kepware address decimal \nnotation string such as <code>\"channel1.device1\"</code></li>\n<li><strong>ex_type</strong>:  type of exchange, either <code>CONSUMER</code> or <code>PRODUCER</code></li>\n<li><strong>exchange_name</strong>:  name of exchange that range is located</li>\n<li><strong>DATA</strong>:  Dict or List of Dicts of the range(s) to add</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 201 - Created\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>If a \"HTTP 207 - Multi-Status\" is received from Kepware with a list of dict error responses for all \n  ranges added that failed.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">device_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ex_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">exchange_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.egd.range.del_range", "modulename": "kepconfig.connectivity.egd.range", "qualname": "del_range", "kind": "function", "doc": "<p>Delete a <code>\"range\"</code> object in Kepware.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>device_path</strong>:  path to EGD device. Standard Kepware address decimal \nnotation string such as <code>\"channel1.device1\"</code></li>\n<li><strong>ex_type</strong>:  type of exchange, either <code>CONSUMER</code> or <code>PRODUCER</code></li>\n<li><strong>exchange_name</strong>:  name of exchange that range is located</li>\n<li><strong>range_name</strong>:  name of range to delete</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">device_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ex_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">exchange_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">range_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.egd.range.modify_range", "modulename": "kepconfig.connectivity.egd.range", "qualname": "modify_range", "kind": "function", "doc": "<p>Modify a <code>\"range\"</code> object and it's properties in Kepware. If a <code>\"range_name\"</code> is not provided as an input,\nyou need to identify the range in the <em>'common.ALLTYPES_NAME'</em> property field in the <code>\"DATA\"</code>. It will \nassume that is the range that is to be modified.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>device_path</strong>:  path to EGD device. Standard Kepware address decimal \nnotation string such as <code>\"channel1.device1\"</code></li>\n<li><strong>ex_type</strong>:  type of exchange, either <code>CONSUMER</code> or <code>PRODUCER</code></li>\n<li><strong>exchange_name</strong>:  name of exchange that range is located</li>\n<li><strong>DATA</strong>:  Dict of the range properties to be modified.</li>\n<li><strong>range_name</strong>:  <em>(optional)</em> name of range to to modify. Only needed if not existing in <code>\"DATA\"</code></li>\n<li><strong>force</strong>:  <em>(optional)</em> if True, will force the configuration update to the Kepware server</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">device_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ex_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">exchange_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">range_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.egd.range.get_range", "modulename": "kepconfig.connectivity.egd.range", "qualname": "get_range", "kind": "function", "doc": "<p>Returns the properties of the <code>\"range\"</code> object or a list of all ranges.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>device_path</strong>:  path to EGD device. Standard Kepware address decimal \nnotation string such as <code>\"channel1.device1\"</code></li>\n<li><strong>ex_type</strong>:  type of exchange, either <code>CONSUMER</code> or <code>PRODUCER</code></li>\n<li><strong>exchange_name</strong>:  name of exchange that range is located</li>\n<li><strong>DATA</strong>:  Dict of the range properties to be modified.</li>\n<li><strong>range_name</strong>:  <em>(optional)</em> name of range to retrieve. If not defined, get all ranges</li>\n<li><strong>options</strong>:  <em>(optional)</em> Dict of parameters to filter, sort or pagenate the list of exchanges. Options are 'filter', \n'sortOrder', 'sortProperty', 'pageNumber', and 'pageSize'. Only used when range_name is not defined.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of properties for the range requested or a List of ranges and their properties</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">device_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ex_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">exchange_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">range_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.tag", "modulename": "kepconfig.connectivity.tag", "kind": "module", "doc": "<p><code>tag</code> exposes an API to allow modifications (add, delete, modify) to \ntag and tag group objects within the Kepware Configuration API</p>\n"}, {"fullname": "kepconfig.connectivity.tag.add_tag", "modulename": "kepconfig.connectivity.tag", "qualname": "add_tag", "kind": "function", "doc": "<p>Add <code>\"tag\"</code> or multiple <code>\"tag\"</code> objects to a specific path in Kepware. \nCan be used to pass a list of tags to be added at one path location.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>device_path</strong>:  path identifying where to add tag(s). Standard Kepware address decimal \nnotation string that tags exists such as \"channel1.device1.tag_group1\" or \"channel1.device1\"</li>\n<li><strong>DATA</strong>:  Dict or List of Dicts of the tag(s) to add</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 201 - Created\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>If a \"HTTP 207 - Multi-Status\" is received from Kepware with a list of dict error responses for all \n  tags added that failed.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">tag_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.tag.add_tag_group", "modulename": "kepconfig.connectivity.tag", "qualname": "add_tag_group", "kind": "function", "doc": "<p>Add <code>\"tag_group\"</code> or multiple <code>\"tag_group\"</code> objects to a specific path in Kepware. \nCan be used to pass a list of tag_groups and children (tags or tag groups) to be added at one \npath location.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>tag_group_path</strong>:  path identifying where to add tag group(s). Standard Kepware address decimal \nnotation string that tag groups exists such as \"channel1.device1.tag_group1\" or \"channel1.device1\"</li>\n<li><strong>DATA</strong>:  Dict or List of Dicts of the tag group(s) to add and it's children (tags or tag groups)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 201 - Created\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>If a \"HTTP 207 - Multi-Status\" is received from Kepware with a list of dict error responses for all \n  tag groups added that failed.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">tag_group_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.tag.add_all_tags", "modulename": "kepconfig.connectivity.tag", "qualname": "add_all_tags", "kind": "function", "doc": "<p>Add <code>\"tag\"</code> and <code>\"tag group\"</code> objects to a device in Kepware. To be used to \npass a list of tags, tag groups and/or children of tag groups (tags and tag \ngroups) to be added at once. See example below for required structure with \n\"tags\" and \"tag_groups\" as keys:</p>\n\n<p>Example DATA:</p>\n\n<pre><code>{\n    'tags': [tag1_dict, tag2_dict,...],\n    'tag_groups':[\n        {\n            tag_group1_properties,\n            'tags': [tag1_dict, tag2_dict,...]\n            'tag_groups':[sub_group1, subgroup2,...]\n        }, \n        {\n            tag_group2_properties,\n            'tags': [tag1_dict, tag2_dict,...]\n            'tag_groups':[sub_group1, subgroup2,...]\n        },...]\n}\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>ch_dev_path</strong>:  device path identifying where to add tags and tag groups. Standard Kepware address decimal \nnotation string that tag groups exists such as \"channel1.device1\"</li>\n<li><strong>DATA</strong>:  Dict of the tags and tag groups to add and it's children (tags or tag groups). </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 201 - Created\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>List [tag failure list, tag group failure list] - If a \"HTTP 207 - Multi-Status\" is received from \n  Kepware for either tags or tag groups, a list of dict error responses for all tags and/or tag groups added that failed.</p>\n</blockquote>\n\n<h6 id=\"returns-3\">Returns</h6>\n\n<blockquote>\n  <p>False - If tags or tag groups are not found in DATA</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">ch_dev_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.tag.modify_tag", "modulename": "kepconfig.connectivity.tag", "qualname": "modify_tag", "kind": "function", "doc": "<p>Modify a <code>\"tag\"</code> object and it's properties in Kepware.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>full_tag_path</strong>:  path identifying location and tag to modify. Standard Kepware address decimal \nnotation string including the tag such as \"channel1.device1.tag_group1.tag1\"</li>\n<li><strong>DATA</strong>:  Dict of the <code>tag</code> properties to be modified</li>\n<li><strong>force</strong>:  <em>(optional)</em> if True, will force the configuration update to the Kepware server</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">full_tag_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.tag.modify_tag_group", "modulename": "kepconfig.connectivity.tag", "qualname": "modify_tag_group", "kind": "function", "doc": "<p>Modify a <code>\"tag group\"</code> object and it's properties in Kepware.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>tag_group_path</strong>:  path identifying location and tag group to modify. Standard Kepware address decimal \nnotation string that tag groups exists such as \"channel1.device1.tag_group1\"</li>\n<li><strong>DATA</strong>:  Dict of the <code>tag group</code> properties to be modified</li>\n<li><strong>force</strong>:  <em>(optional)</em> if True, will force the configuration update to the Kepware server</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">tag_group_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.tag.del_tag", "modulename": "kepconfig.connectivity.tag", "qualname": "del_tag", "kind": "function", "doc": "<p>Delete <code>\"tag\"</code> object at a specific path in Kepware.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>full_tag_path</strong>:  path identifying location and tag to delete. Standard Kepware address decimal \nnotation string including the tag such as \"channel1.device1.tag_group1.tag1\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">full_tag_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.tag.del_tag_group", "modulename": "kepconfig.connectivity.tag", "qualname": "del_tag_group", "kind": "function", "doc": "<p>Delete <code>\"tag group\"</code> object at a specific path in Kepware.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>tag_group_path</strong>:  path identifying location and tag group to delete. Standard Kepware address decimal \nnotation string that tag groups exists such as \"channel1.device1.tag_group1\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">tag_group_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.tag.get_tag", "modulename": "kepconfig.connectivity.tag", "qualname": "get_tag", "kind": "function", "doc": "<p>Returns the properties of the <code>\"tag\"</code> object at a specific path in Kepware. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>full_tag_path</strong>:  path identifying location and tag to delete. Standard Kepware address decimal \nnotation string including the tag such as \"channel1.device1.tag_group1.tag1\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of data for the tag requested</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">full_tag_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.tag.get_all_tags", "modulename": "kepconfig.connectivity.tag", "qualname": "get_all_tags", "kind": "function", "doc": "<p>Returns the properties of all <code>\"tag\"</code> object at a specific path in Kepware. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>full_tag_path</strong>:  path identifying location to retreive tag list. Standard Kepware address decimal \nnotation string including the tag such as \"channel1.device1.tag_group1.tag1\"</li>\n<li><strong>options</strong>:  <em>(optional)</em> Dict of parameters to filter, sort or pagenate the list of tags. Options are <code>filter</code>, \n<code>sortOrder</code>, <code>sortProperty</code>, <code>pageNumber</code>, and <code>pageSize</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List of data for all tags</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">full_tag_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.tag.get_tag_group", "modulename": "kepconfig.connectivity.tag", "qualname": "get_tag_group", "kind": "function", "doc": "<p>Returns the properties of the \"tag group\" object at a specific \npath in Kepware. Returned object is JSON.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>tag_group_path</strong>:  path identifying location and tag group to retrieve properties. Standard Kepware address decimal \nnotation string that tag groups exists such as \"channel1.device1.tag_group1\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of data for the tag group requested</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">tag_group_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.tag.get_all_tag_groups", "modulename": "kepconfig.connectivity.tag", "qualname": "get_all_tag_groups", "kind": "function", "doc": "<p>Returns the properties of all <code>\"tag group\"</code> objects at a specific \npath in Kepware.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>tag_group_path</strong>:  path identifying location to retrieve tag group list and properties. Standard Kepware address decimal \nnotation string that tag groups exists such as \"channel1.device1.tag_group1\"</li>\n<li><strong>options</strong>:  <em>(optional)</em> Dict of parameters to filter, sort or pagenate the list of devices. Options are <code>filter</code>, \n<code>sortOrder</code>, <code>sortProperty</code>, <code>pageNumber</code>, and <code>pageSize</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List of data for all tag groups</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">tag_group_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.tag.get_full_tag_structure", "modulename": "kepconfig.connectivity.tag", "qualname": "get_full_tag_structure", "kind": "function", "doc": "<p>Returns the properties of all <code>\"tag\"</code> and <code>\"tag group\"</code> objects at a specific \npath in Kepware. Returned object is a dict of tag list and tag group list.</p>\n\n<p>Example:</p>\n\n<pre><code>{\n    'tags': [tag1_dict, tag2_dict,...],\n    'tag_groups':[tag_group1_dict, tag_group2_dict,...]\n}\n</code></pre>\n\n<p>If <code>recursive</code> is TRUE, then the call will iterate through all tag groups and get the tags and \ntag groups of all tag group children.This would be the equivilant of asking for all tags and tag groups\nthat exist below the <code>\"path\"</code> location. The returned object would look like below, nested based on how many \nlevels the tag_group namespace has tags or tag_groups:</p>\n\n<p>Example with Recursive True:</p>\n\n<pre><code>{\n    'tags': [tag1_dict, tag2_dict,...],\n    'tag_groups':[\n        {\n            tag_group1_properties,\n            'tags': [tag1_dict, tag2_dict,...]\n            'tag_groups':[sub_group1, subgroup2,...]\n        }, \n        {\n            tag_group2_properties,\n            'tags': [tag1_dict, tag2_dict,...]\n            'tag_groups':[sub_group1, subgroup2,...]\n        },...]\n}\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>path</strong>:  path identifying location to retreive the tag structure. Standard Kepware address decimal \nnotation string such as \"channel1.device1.tag_group1\" and must container at least the channel and device.</li>\n<li><strong>recursive</strong>:  <em>(optional)</em> If True, returns structures within the tag groups found and all of their \nchildren. (default= False)</li>\n<li><strong>options</strong>:  <em>(optional)</em> Dict of parameters to filter, sort or pagenate the list of tags and tag groups. \nOptions are 'filter', 'sortOrder', and 'sortProperty' only.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of data for the tag structure requested at \"path\" location</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">recursive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.udd", "modulename": "kepconfig.connectivity.udd", "kind": "module", "doc": "<p><code>udd</code> module provides support for Universal Device driver specific objects \nwithin the Kepware Configuration API</p>\n"}, {"fullname": "kepconfig.connectivity.udd.profile", "modulename": "kepconfig.connectivity.udd.profile", "kind": "module", "doc": "<p><code>profile</code> exposes an API to allow modifications (add, delete, modify) to \nprofile objects for the UDD Profile Library plug-in within the Kepware Configuration API</p>\n"}, {"fullname": "kepconfig.connectivity.udd.profile.add_profile", "modulename": "kepconfig.connectivity.udd.profile", "qualname": "add_profile", "kind": "function", "doc": "<p>Add a <code>\"profile\"</code> or a list of <code>\"profile\"</code> objects to the UDD Profile Library plug-in for Kepware. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>DATA</strong>:  Dict or List of Dicts of the profiles to add to the Profile Library \nthrough Kepware Configuration API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 201 - Created\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>If a \"HTTP 207 - Multi-Status\" is received from Kepware with a list of dict error responses for all \n  profiles added that failed.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.udd.profile.del_profile", "modulename": "kepconfig.connectivity.udd.profile", "qualname": "del_profile", "kind": "function", "doc": "<p>Delete a <code>\"profile\"</code> object in UDD Profile Library plug-in for Kepware.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>profile_name</strong>:  name of profile</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">profile_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.udd.profile.modify_profile", "modulename": "kepconfig.connectivity.udd.profile", "qualname": "modify_profile", "kind": "function", "doc": "<p>Modify a <code>\"profile\"</code> object and it's properties in Kepware. If a <code>\"profile_name\"</code> is not provided as an input,\nyou need to identify the profile in the <em>'common.ALLTYPES_NAME'</em> property field in the <code>\"DATA\"</code>. It will \nassume that is the profile that is to be modified.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>DATA</strong>:  Dict or List of Dicts of the profile properties to be modified.</li>\n<li><strong>profile_name</strong>:  <em>(optional)</em> name of profile to modify. Only needed if not existing in <code>\"DATA\"</code></li>\n<li><strong>force</strong>:  <em>(optional)</em> if True, will force the configuration update to the Kepware server</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">profile_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.udd.profile.get_profile", "modulename": "kepconfig.connectivity.udd.profile", "qualname": "get_profile", "kind": "function", "doc": "<p>Returns the properties of the profile object or a list of all profiles and their \nproperties. Will return a list if <code>\"profile_name\"</code> is not provided.</p>\n\n<p>INPUTS:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>profile_name</strong>:  <em>(optional)</em> name of profile. If not defined, will get all profiles</li>\n<li><strong>options</strong>:  <em>(optional)</em> Dict of parameters to filter, sort or pagenate when getting a list of profiles. Options are <code>filter</code>, \n<code>sortOrder</code>, <code>sortProperty</code>, <code>pageNumber</code>, and <code>pageSize</code>. Only used when profile_name is not defined.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of the profile properties or List of Dicts for all profiles and their properties in the Profile Library</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">profile_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.connectivity.udd.profile.get_all_profiles", "modulename": "kepconfig.connectivity.udd.profile", "qualname": "get_all_profiles", "kind": "function", "doc": "<p>Returns list of all profile objects and their properties. Returned object is JSON list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>options</strong>:  <em>(optional)</em> Dict of parameters to filter, sort or pagenate when getting a list of profiles. Options are <code>filter</code>, \n<code>sortOrder</code>, <code>sortProperty</code>, <code>pageNumber</code>, and <code>pageSize</code>. Only used when profile_name is not defined.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List of data for all profiles and their properties in the Profile Library</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.datalogger", "modulename": "kepconfig.datalogger", "kind": "module", "doc": "<p><code>datalogger</code> module provides support for Kepware's Datalogger plug-in specific objects \nwithin the Kepware Configuration API</p>\n"}, {"fullname": "kepconfig.datalogger.log_group", "modulename": "kepconfig.datalogger.log_group", "kind": "module", "doc": "<p><code>log_group</code> exposes an API to allow modifications (add, delete, modify) to \nlog group objects in DataLogger within the Kepware Configuration API</p>\n"}, {"fullname": "kepconfig.datalogger.log_group.add_log_group", "modulename": "kepconfig.datalogger.log_group", "qualname": "add_log_group", "kind": "function", "doc": "<p>Add a <code>\"log group\"</code> or multiple <code>\"log groups\"</code> objects to Kepware's DataLogger. It can be used \nto pass a list of log groups to be added all at once.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>DATA</strong>:  Dict or a list of the log groups to add through Kepware Configuration API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 201 - Created\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>If a \"HTTP 207 - Multi-Status\" is received from Kepware with a list of dict error responses for all \n  log groups added that failed.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.datalogger.log_group.del_log_group", "modulename": "kepconfig.datalogger.log_group", "qualname": "del_log_group", "kind": "function", "doc": "<p>Delete a <code>\"log group\"</code> object in Kepware's Datalogger.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>log_group</strong>:  name of log group to delete</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">log_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.datalogger.log_group.modify_log_group", "modulename": "kepconfig.datalogger.log_group", "qualname": "modify_log_group", "kind": "function", "doc": "<p>Modify a <code>\"log group\"</code> object and it's properties in Kepware's Datalogger. If a <code>\"log group\"</code> is not provided as an input,\nyou need to identify the log group in the <em>'common.ALLTYPES_NAME'</em> property field in the <code>\"DATA\"</code>. It will \nassume that is the log group that is to be modified.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>DATA</strong>:  Dict of the log group properties to be modified.</li>\n<li><strong>log_group</strong>:  <em>(optional)</em> name of log group to modify. Only needed if not existing in <code>\"DATA\"</code></li>\n<li><strong>force</strong>:  <em>(optional)</em> if True, will force the configuration update to the Kepware server</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">log_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.datalogger.log_group.get_log_group", "modulename": "kepconfig.datalogger.log_group", "qualname": "get_log_group", "kind": "function", "doc": "<p>Returns the properties of the <code>\"log group\"</code> object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>log_group</strong>:  name of log group to retrieve</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of properties for the log group requested</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">log_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.datalogger.log_group.get_all_log_groups", "modulename": "kepconfig.datalogger.log_group", "qualname": "get_all_log_groups", "kind": "function", "doc": "<p>Returns the properties of all log group objects for Kepware's Datalogger. Returned object is JSON list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>options</strong>:  <em>(optional)</em> Dict of parameters to filter, sort or pagenate the list of log groups. Options are 'filter', \n'sortOrder', 'sortProperty', 'pageNumber', and 'pageSize'. Only used when exchange_name is not defined.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of properties for all log groups requested</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.datalogger.log_group.enable_log_group", "modulename": "kepconfig.datalogger.log_group", "qualname": "enable_log_group", "kind": "function", "doc": "<p>Enable the <code>\"log group\"</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>log_group</strong>:  name of log group to enable</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">log_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.datalogger.log_group.disable_log_group", "modulename": "kepconfig.datalogger.log_group", "qualname": "disable_log_group", "kind": "function", "doc": "<p>Disable the log group. Returned object is JSON.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>log_group</strong>:  name of log group to enable</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">log_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.datalogger.log_group.reset_column_mapping_service", "modulename": "kepconfig.datalogger.log_group", "qualname": "reset_column_mapping_service", "kind": "function", "doc": "<p>Executes a ResetColumnMapping serivce call to the log group</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>log_group</strong>:  name of log group to enable</li>\n<li><strong>job_ttl</strong>:  <em>(optional)</em> Determines the number of seconds a job instance will exist following completion.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><code>KepServiceResponse</code> instance with job information</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError (If not HTTP code 202 [Accepted] or 429 [Too Busy] returned)</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">log_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">job_ttl</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">structures</span><span class=\"o\">.</span><span class=\"n\">KepServiceResponse</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.datalogger.log_items", "modulename": "kepconfig.datalogger.log_items", "kind": "module", "doc": "<p><code>log_items</code> exposes an API to allow modifications (add, delete, modify) to \nlog item (tag) objects in a Datalogger log group within the Kepware Configuration API</p>\n"}, {"fullname": "kepconfig.datalogger.log_items.add_log_item", "modulename": "kepconfig.datalogger.log_items", "qualname": "add_log_item", "kind": "function", "doc": "<p>Add a <code>\"log item\"</code> or multiple <code>\"log item\"</code> objects to a log group in Kepware's Datalogger. It can \nbe used to pass a list of log items to be added all at once.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>log_group</strong>:  name of log group that the log items will be added</li>\n<li><strong>DATA</strong>:  Dict or a list of the log items to add through Kepware Configuration API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 201 - Created\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>If a \"HTTP 207 - Multi-Status\" is received from Kepware with a list of dict error responses for all \n  log items added that failed.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">log_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.datalogger.log_items.del_log_item", "modulename": "kepconfig.datalogger.log_items", "qualname": "del_log_item", "kind": "function", "doc": "<p>Delete a <code>\"log item\"</code> object of a log group in Kepware's Datalogger.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>log_group</strong>:  name of log group that log item exists</li>\n<li><strong>log_item</strong>:  name of log item to delete</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">log_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">log_item</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.datalogger.log_items.modify_log_item", "modulename": "kepconfig.datalogger.log_items", "qualname": "modify_log_item", "kind": "function", "doc": "<p>Modify a <code>\"log_item\"</code> object and it's properties in Kepware. If a <code>\"log_item\"</code> is not provided as an input,\nyou need to identify the log_item in the <em>'common.ALLTYPES_NAME'</em> property field in the <code>\"DATA\"</code>. It will \nassume that is the log_item that is to be modified.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>log_group</strong>:  name of log group that log item exists</li>\n<li><strong>DATA</strong>:  Dict of the log item properties to be modified.</li>\n<li><strong>log_item</strong>:  <em>(optional)</em> name of log item to modify. Only needed if not existing in <code>\"DATA\"</code></li>\n<li><strong>force</strong>:  <em>(optional)</em> if True, will force the configuration update to the Kepware server</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">log_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">log_item</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.datalogger.log_items.get_log_item", "modulename": "kepconfig.datalogger.log_items", "qualname": "get_log_item", "kind": "function", "doc": "<p>Returns the properties of the <code>\"log item\"</code> object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>log_group</strong>:  name of log group that log item exists</li>\n<li><strong>log_item</strong>:  name of log item to retrieve</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of properties for the log group requested</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">log_group</span>, </span><span class=\"param\"><span class=\"n\">log_item</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.datalogger.log_items.get_all_log_items", "modulename": "kepconfig.datalogger.log_items", "qualname": "get_all_log_items", "kind": "function", "doc": "<p>Returns the properties of all <code>\"log item\"</code> objects for a log group.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>log_group</strong>:  name of log group that log item exists</li>\n<li><strong>options</strong>:  <em>(optional)</em> Dict of parameters to filter, sort or pagenate the list of log groups. Options are 'filter', \n'sortOrder', 'sortProperty', 'pageNumber', and 'pageSize'. Only used when exchange_name is not defined.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of properties for all log items in the log group requested</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">log_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.datalogger.mapping", "modulename": "kepconfig.datalogger.mapping", "kind": "module", "doc": "<p><code>mapping</code> exposes an API to allow modifications (add, delete, modify) to \ncolumn mapping objects in a Datalogger log group within the Kepware Configuration API</p>\n"}, {"fullname": "kepconfig.datalogger.mapping.modify_mapping", "modulename": "kepconfig.datalogger.mapping", "qualname": "modify_mapping", "kind": "function", "doc": "<p>Modify a column <code>\"mapping\"</code> object and it's properties in Kepware. If a <code>\"mapping\"</code> is not provided as an input,\nyou need to identify the column mapping in the <em>'common.ALLTYPES_NAME'</em> property field in the <code>\"DATA\"</code>. It will \nassume that is the column mapping that is to be modified.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>log_group</strong>:  name of log group for the mapping</li>\n<li><strong>DATA</strong>:  Dict of the mapping properties to be modified.</li>\n<li><strong>mapping</strong>:  <em>(optional)</em> column mapping to modify in the log group. Only needed if not existing in <code>\"DATA\"</code></li>\n<li><strong>force</strong>:  <em>(optional)</em> if True, will force the configuration update to the Kepware server</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">log_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">mapping</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.datalogger.mapping.get_mapping", "modulename": "kepconfig.datalogger.mapping", "qualname": "get_mapping", "kind": "function", "doc": "<p>Returns the properties of the <code>\"mapping\"</code> object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>log_group</strong>:  name of log group for the mapping</li>\n<li><strong>mapping</strong>:  name of column mapping to retrieve properties</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of properties for the mapping object requested</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">log_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">mapping</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.datalogger.mapping.get_all_mappings", "modulename": "kepconfig.datalogger.mapping", "qualname": "get_all_mappings", "kind": "function", "doc": "<p>Returns the properties of all column <code>\"mapping\"</code> objects for a log group.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>log_group</strong>:  name of log group for the mapping</li>\n<li><strong>options</strong>:  <em>(optional)</em> Dict of parameters to filter, sort or pagenate the list of mapping items. Options are 'filter', \n'sortOrder', 'sortProperty', 'pageNumber', and 'pageSize'. Only used when exchange_name is not defined.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of properties for all mapping items in the log group requested</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">log_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.datalogger.triggers", "modulename": "kepconfig.datalogger.triggers", "kind": "module", "doc": "<p><code>triggers</code> exposes an API to allow modifications (add, delete, modify) to \ntrigger objects in a Datalogger log group within the Kepware Configuration API</p>\n"}, {"fullname": "kepconfig.datalogger.triggers.add_trigger", "modulename": "kepconfig.datalogger.triggers", "qualname": "add_trigger", "kind": "function", "doc": "<p>Add a <code>\"trigger\"</code> or multiple <code>\"trigger\"</code> objects to a log group in Kepware's Datalogger. It can \nbe used to pass a list of triggers to be added all at once.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>log_group</strong>:  name of log group for the trigger items</li>\n<li><strong>DATA</strong>:  Dict or a list of the trigger items to add through Kepware Configuration API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 201 - Created\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>If a \"HTTP 207 - Multi-Status\" is received from Kepware with a list of dict error responses for all \n  triggers added that failed.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">log_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.datalogger.triggers.del_trigger", "modulename": "kepconfig.datalogger.triggers", "qualname": "del_trigger", "kind": "function", "doc": "<p>Delete a <code>\"trigger\"</code> object of a log group in Kepware's Datalogger.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>log_group</strong>:  name of log group for the trigger items</li>\n<li><strong>trigger</strong>:  name of trigger to delete</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">log_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">trigger</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.datalogger.triggers.modify_trigger", "modulename": "kepconfig.datalogger.triggers", "qualname": "modify_trigger", "kind": "function", "doc": "<p>Modify a <code>\"trigger\"</code> object and it's properties in Kepware. If a <code>\"trigger\"</code> is not provided as an input,\nyou need to identify the trigger in the <em>'common.ALLTYPES_NAME'</em> property field in the <code>\"DATA\"</code>. It will \nassume that is the trigger that is to be modified.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>log_group</strong>:  name of log group for the trigger items</li>\n<li><strong>DATA</strong>:  Dict of the trigger properties to be modified.</li>\n<li><strong>trigger</strong>:  <em>(optional)</em> name of trigger to modify in the log group. Only needed if not existing in <code>\"DATA\"</code></li>\n<li><strong>force</strong>:  <em>(optional)</em> if True, will force the configuration update to the Kepware server</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">log_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">trigger</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.datalogger.triggers.get_trigger", "modulename": "kepconfig.datalogger.triggers", "qualname": "get_trigger", "kind": "function", "doc": "<p>Returns the properties of the <code>\"trigger\"</code> object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>log_group</strong>:  name of log group for the trigger items</li>\n<li><strong>trigger</strong>:  name of trigger to retrieve</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of properties for the trigger requested</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">log_group</span>, </span><span class=\"param\"><span class=\"n\">trigger</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.datalogger.triggers.get_all_triggers", "modulename": "kepconfig.datalogger.triggers", "qualname": "get_all_triggers", "kind": "function", "doc": "<p>Returns the properties of all <code>\"trigger\"</code> objects for a log group.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>log_group</strong>:  name of log group for the trigger items</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of properties for the trigger requested</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n<li><strong>options</strong>:  <em>(optional)</em> Dict of parameters to filter, sort or pagenate the list of triggers. Options are 'filter', \n'sortOrder', 'sortProperty', 'pageNumber', and 'pageSize'. Only used when exchange_name is not defined.</li>\n</ul>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>list of properties for all triggers in the log group requested</p>\n</blockquote>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">log_group</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.error", "modulename": "kepconfig.error", "kind": "module", "doc": "<p><code>error</code> Exception classes raised by Kepconfig.\nIncludes KepError, KepURLError and KepHTTPError</p>\n"}, {"fullname": "kepconfig.error.KepError", "modulename": "kepconfig.error", "qualname": "KepError", "kind": "class", "doc": "<p>General Exception class for Kepconfig.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>msg</strong>:  General error message returned in string format.</li>\n</ul>\n", "bases": "builtins.Exception"}, {"fullname": "kepconfig.error.KepError.__init__", "modulename": "kepconfig.error", "qualname": "KepError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span></span>)</span>"}, {"fullname": "kepconfig.error.KepURLError", "modulename": "kepconfig.error", "qualname": "KepURLError", "kind": "class", "doc": "<p>Exception class raised by Kepconfig that derives responses from the urllib URLError exceptions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong>:  full url path of the request that flagged a URLError exception</li>\n<li><strong>msg</strong>:  reason parameter in URLError exception</li>\n</ul>\n", "bases": "KepError"}, {"fullname": "kepconfig.error.KepURLError.__init__", "modulename": "kepconfig.error", "qualname": "KepURLError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "kepconfig.error.KepHTTPError", "modulename": "kepconfig.error", "qualname": "KepHTTPError", "kind": "class", "doc": "<p>Exception class raised by Kepconfig that derives responses from the urllib HTTPError \nexceptions. This exception class is also a valid HTTP response instance.  It behaves \nthis way because HTTP protocol errors are valid responses, with a status \ncode, headers, and a body.  In some contexts, an application may want to \nhandle an exception like a regular response.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong>:  url parameter in HTTPError exception</li>\n<li><strong>code</strong>:  HTTP response code parameter in HTTPError exception</li>\n<li><strong>hdrs</strong>:  hdrs parameter in HTTPError exception</li>\n<li><strong>payload</strong>:  string of HTTP response payload that flagged HTTPError exception </li>\n<li><strong>msg</strong>:  msg parameter in HTTPError exception</li>\n</ul>\n", "bases": "KepError"}, {"fullname": "kepconfig.error.KepHTTPError.__init__", "modulename": "kepconfig.error", "qualname": "KepHTTPError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">code</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">hdrs</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "kepconfig.iot_gateway", "modulename": "kepconfig.iot_gateway", "kind": "module", "doc": "<p><code>iot_gateway</code> module provides support for Kepware's IoT Gateway plug-in \nspecific objects within the Kepware Configuration API</p>\n"}, {"fullname": "kepconfig.iot_gateway.agent", "modulename": "kepconfig.iot_gateway.agent", "kind": "module", "doc": "<p><code>agent</code> exposes an API to allow modifications (add, delete, modify) to \nIot Gateway agent objects within the Kepware Configuration API</p>\n"}, {"fullname": "kepconfig.iot_gateway.agent.add_iot_agent", "modulename": "kepconfig.iot_gateway.agent", "qualname": "add_iot_agent", "kind": "function", "doc": "<p>Add a  <code>\"agent\"</code> or multiple <code>\"agent\"</code> objects of a specific type to Kepware's IoT Gateway. Can be used to pass children of an\nagent object such as iot items. This allows you to create an agent and iot items if desired. Multiple Agents need to be of the \nsame type.</p>\n\n<p>Additionally it can be used to pass a list of agents and it's children to be added all at once.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>DATA</strong>:  Dict or List of Dicts of the agent and it's children\nexpected by Kepware Configuration API</li>\n<li><strong>agent_type</strong>:  <em>(optional)</em> agent type to add to IoT Gateway. Only needed if not existing in <code>\"DATA\"</code>. Valid values are \n<code>MQTT Client</code>, <code>REST Client</code> or <code>REST Server</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 201 - Created\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>If a \"HTTP 207 - Multi-Status\" is received from Kepware with a list of dict error responses for all \n  iot agents added that failed.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">agent_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.iot_gateway.agent.del_iot_agent", "modulename": "kepconfig.iot_gateway.agent", "qualname": "del_iot_agent", "kind": "function", "doc": "<p>Delete a <code>\"agent\"</code> object in Kepware. This will delete all children as well</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>agent</strong>:  name of IoT Agent to delete</li>\n<li><strong>agent_type</strong>:  <em>(optional)</em> agent type to delete in IoT Gateway. Valid values are \n<code>MQTT Client</code>, <code>REST Client</code> or <code>REST Server</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">agent</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">agent_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.iot_gateway.agent.modify_iot_agent", "modulename": "kepconfig.iot_gateway.agent", "qualname": "modify_iot_agent", "kind": "function", "doc": "<p>Modify a <code>\"agent\"</code> object and it's properties in Kepware. If a <code>\"agent\"</code> is not provided as an input,\nyou need to identify the agent in the <em>'common.ALLTYPES_NAME'</em> property field in the <code>\"DATA\"</code>. It will \nassume that is the agent that is to be modified.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>DATA</strong>:  Dict of the iot agent properties to be modified.</li>\n<li><strong>agent</strong>:  <em>(optional)</em> name of IoT agent to modify. Only needed if not existing in <code>\"DATA\"</code></li>\n<li><strong>agent_type</strong>:  <em>(optional)</em> agent type to modify. Only needed if not existing in <code>\"DATA\"</code>. Valid values are \n<code>MQTT Client</code>, <code>REST Client</code> or <code>REST Server</code></li>\n<li><strong>force</strong>:  <em>(optional)</em> if True, will force the configuration update to the Kepware server</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">agent</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agent_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.iot_gateway.agent.get_iot_agent", "modulename": "kepconfig.iot_gateway.agent", "qualname": "get_iot_agent", "kind": "function", "doc": "<p>Returns the properties of the <code>\"agent\"</code> object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>DATA</strong>:  Dict of the iot agent properties to be modified.</li>\n<li><strong>agent</strong>:  name of IoT agent to retrieve</li>\n<li><strong>agent_type</strong>:  agent type. Valid values are <code>MQTT Client</code>, <code>REST Client</code> or <code>REST Server</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of properties for the iot agent requested</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>, </span><span class=\"param\"><span class=\"n\">agent</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">agent_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.iot_gateway.agent.get_all_iot_agents", "modulename": "kepconfig.iot_gateway.agent", "qualname": "get_all_iot_agents", "kind": "function", "doc": "<p>Returns the properties of all <code>\"agent\"</code> objects for a specific agent type. Returned object is JSON list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>agent_type</strong>:  agent type. Valid values are <code>MQTT Client</code>, <code>REST Client</code> or <code>REST Server</code></li>\n<li><strong>options</strong>:  <em>(optional)</em> Dict of parameters to filter, sort or pagenate the list of IoT agents. Options are 'filter', \n'sortOrder', 'sortProperty', 'pageNumber', and 'pageSize'. Only used when exchange_name is not defined.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of properties for all IoT agents requested</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">agent_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.iot_gateway.iot_items", "modulename": "kepconfig.iot_gateway.iot_items", "kind": "module", "doc": "<p><code>iot_items</code> exposes an API to allow modifications (add, delete, modify) to \niot_items objects within the Kepware Configuration API</p>\n"}, {"fullname": "kepconfig.iot_gateway.iot_items.add_iot_item", "modulename": "kepconfig.iot_gateway.iot_items", "qualname": "add_iot_item", "kind": "function", "doc": "<p>Add a <code>\"iot item\"</code> or multiple <code>\"iot item\"</code> objects to Kepware's IoT Gateway agent. Additionally \nit can be used to pass a list of iot items to be added to an agent all at once.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>DATA</strong>:  Dict or List of Dicts of the iot item or list of items\nexpected by Kepware Configuration API</li>\n<li><strong>agent</strong>:  name of IoT Agent</li>\n<li><strong>agent_type</strong>:  agent type. Valid values are <code>MQTT Client</code>, <code>REST Client</code> or <code>REST Server</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 201 - Created\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>If a \"HTTP 207 - Multi-Status\" is received from Kepware with a list of dict error responses for all \n  iot items added that failed.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">agent</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">agent_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.iot_gateway.iot_items.del_iot_item", "modulename": "kepconfig.iot_gateway.iot_items", "qualname": "del_iot_item", "kind": "function", "doc": "<p>Delete an <code>\"iot item\"</code> object in Kepware.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>iot_item</strong>:  IoT item to delete</li>\n<li><strong>agent</strong>:  name of IoT Agent</li>\n<li><strong>agent_type</strong>:  agent type. Valid values are <code>MQTT Client</code>, <code>REST Client</code> or <code>REST Server</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">iot_item</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">agent</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">agent_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.iot_gateway.iot_items.modify_iot_item", "modulename": "kepconfig.iot_gateway.iot_items", "qualname": "modify_iot_item", "kind": "function", "doc": "<p>Modify an <code>\"iot item\"</code> object and it's properties in Kepware. If a <code>\"iot item\"</code> is not provided as an input,\nyou need to identify the iot item in the <em>'common.ALLTYPES_NAME'</em> property field in the <code>\"DATA\"</code>. It will \nassume that is the iot item that is to be modified.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>DATA</strong>:  Dict of the iot item properties to be modified.</li>\n<li><strong>agent</strong>:  name of IoT Agent</li>\n<li><strong>agent_type</strong>:  agent type. Valid values are <code>MQTT Client</code>, <code>REST Client</code> or <code>REST Server</code></li>\n<li><strong>iot_item</strong>:  <em>(optional)</em> name of IoT item to modify. Only needed if not existing in <code>\"DATA\"</code></li>\n<li><strong>force</strong>:  <em>(optional)</em> if True, will force the configuration update to the Kepware server</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True - If a \"HTTP 200 - OK\" is received from Kepware server</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">agent</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">agent_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">iot_item</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.iot_gateway.iot_items.get_iot_item", "modulename": "kepconfig.iot_gateway.iot_items", "qualname": "get_iot_item", "kind": "function", "doc": "<p>Returns the properties of the <code>\"iot item\"</code> object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>iot_item</strong>:  name of IoT item to retrieve properties</li>\n<li><strong>agent</strong>:  name of IoT Agent</li>\n<li><strong>agent_type</strong>:  agent type. Valid values are <code>MQTT Client</code>, <code>REST Client</code> or <code>REST Server</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict of properties for the iot item requested</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">iot_item</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">agent</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">agent_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.iot_gateway.iot_items.get_all_iot_items", "modulename": "kepconfig.iot_gateway.iot_items", "qualname": "get_all_iot_items", "kind": "function", "doc": "<p>Returns the properties of all <code>\"iot item\"</code> objects for an agent.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server</strong>:  instance of the <code>server</code> class</li>\n<li><strong>iot_item</strong>:  name of IoT item to retrieve properties</li>\n<li><strong>agent</strong>:  name of IoT Agent</li>\n<li><strong>agent_type</strong>:  agent type. Valid values are <code>MQTT Client</code>, <code>REST Client</code> or <code>REST Server</code></li>\n<li><strong>options</strong>:  <em>(optional)</em> Dict of parameters to filter, sort or pagenate the list of IoT items. Options are 'filter', \n'sortOrder', 'sortProperty', 'pageNumber', and 'pageSize'. Only used when exchange_name is not defined.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of properties for all IoT items</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KepHTTPError</strong>:  If urllib provides an HTTPError</li>\n<li><strong>KepURLError</strong>:  If urllib provides an URLError</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"n\">kepconfig</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">server</span>,</span><span class=\"param\">\t<span class=\"n\">agent</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">agent_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "kepconfig.structures", "modulename": "kepconfig.structures", "kind": "module", "doc": "<p><code>structures</code> provides general data structures to help manage \nvarious objects for Kepware's configuration</p>\n"}, {"fullname": "kepconfig.structures.KepServiceResponse", "modulename": "kepconfig.structures", "qualname": "KepServiceResponse", "kind": "class", "doc": "<p>A class to represent a return object when calling a \"service\" API of Kepware. This is\nused to return the responses when a \"service\" is executed appropriately</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>code</strong>:  HTTP code returned</p></li>\n<li><p><strong>message</strong>:  return from the \"service\" call</p></li>\n<li><p><strong>href</strong>:  URL reference to the JOB that is created by the service API</p></li>\n</ul>\n"}, {"fullname": "kepconfig.structures.KepServiceResponse.__init__", "modulename": "kepconfig.structures", "qualname": "KepServiceResponse.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">href</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "kepconfig.structures.KepServiceStatus", "modulename": "kepconfig.structures", "qualname": "KepServiceStatus", "kind": "class", "doc": "<p>A class to represent a status object when checking on a \"service\" API job state in Kepware. This is\nused to return the status of a \"service\" job</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>complete</strong>:  Boolean of service job completion status</p></li>\n<li><p><strong>status</strong>:  Status code of job</p></li>\n<li><p><strong>message</strong>:  Error message if service job fails</p></li>\n</ul>\n"}, {"fullname": "kepconfig.structures.KepServiceStatus.__init__", "modulename": "kepconfig.structures", "qualname": "KepServiceStatus.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">complete</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">status</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "kepconfig.utils", "modulename": "kepconfig.utils", "kind": "module", "doc": "<p><code>utils</code> provides general utilities to help manage \nvarious objects for Kepware's configuration</p>\n"}, {"fullname": "kepconfig.utils.path_split", "modulename": "kepconfig.utils", "qualname": "path_split", "kind": "function", "doc": "<p>Used to split the standard Kepware address decimal notation into a dict that contains the \n<em>channel</em>, <em>device</em> and <em>tag_path</em> keys.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong>:  standard Kepware address in decimal notation (\"ch1.dev1.tg1.tg2.tg3\")</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict that contains the \"channel\", \"device\" and \"tag_path\"</p>\n</blockquote>\n\n<p>Ex: path = \"ch1.dev1.tg1.tg2.tg3\"</p>\n\n<p>return = {'channel': 'ch1', 'device': 'dev1', 'tag_path': ['tg1','tg2','tg3']}</p>\n\n<p>Ex: path = \"ch1.dev1\"</p>\n\n<p>return = {'channel': 'ch1', 'device': 'dev1'}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();